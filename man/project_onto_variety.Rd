% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/project_onto_variety.R
\name{project_onto_variety}
\alias{project_onto_variety}
\title{Projection onto a variety}
\usage{
project_onto_variety(x0, poly, dt = 0.05, varorder = vars(poly),
  n_correct = 2, al = rnorm(length(x0)), message = FALSE,
  tol = sqrt(.Machine$double.eps))
}
\arguments{
\item{x0}{Atomic vector, the point to be projected.}

\item{poly}{An mpoly object, typically created with \code{\link[=mp]{mp()}}.}

\item{dt}{The t-mesh size for the homotopy.}

\item{varorder}{A character vector specifying the variable order to pass to
\code{\link[mpoly:as.function]{mpoly::as.function()}}.}

\item{n_correct}{The number of Newton correction iterations to use.}

\item{al}{A numeric vector of length 2; the patch to do projective
calculations over.}
}
\value{
A numeric vector the same length as \code{x0}.
}
\description{
A R-based implementation of the gradient descent homotopies
}
\examples{


## basic usage
########################################

x0 <- c(1,1)
p <- mp("x^2 + y^2 - 1")
(x0_proj <- project_onto_variety(x0, p))

as.function(p)(x0_proj)
sqrt(2)/2

cbind(t(x0), t(x0_proj)) \%>\% 
  as.data.frame() \%>\% as_tibble() \%>\% 
  purrr::set_names(c("x", "y", "x_proj", "y_proj")) -> df

ggvariety(p) + coord_equal() +
  ggplot2::geom_segment(
    aes(x, y, xend = x_proj, yend = y_proj), 
    data = df, inherit.aes = FALSE
  )



## options
########################################

x0 <- c(1,1)
p <- mp("x^2 + y^2 - 1")
project_onto_variety(x0, p, message = TRUE)
project_onto_variety(x0, p, dt = .25, message = TRUE)



## more complex example
########################################

p <- mp("(x^2 + y^2)^2 - 2 (x^2 - y^2)")
ggvariety(p, c(-2, 2), n = 201) + coord_equal()

x0 <- c(.05, .10)
(x0_proj <- project_onto_variety(x0, p))

cbind(t(x0), t(x0_proj)) \%>\% 
  as.data.frame() \%>\% as_tibble() \%>\% 
  purrr::set_names(c("x", "y", "x_proj", "y_proj")) -> df

ggvariety(p, c(-2, 2)) + coord_equal() +
  ggplot2::geom_segment(
    aes(x, y, xend = x_proj, yend = y_proj), 
    data = df, inherit.aes = FALSE
  )




## projecting a dataset
########################################

\dontrun{ requires stan

(p <- lissajous(3, 3, 0, 0))
ggvariety(p, n = 251) + coord_equal()

set.seed(1)
(samps <- rvnorm(1e4, p, sd = .025, output = "tibble"))

library("ggplot2")
library("dplyr")

ggplot(samps, aes(x, y)) + 
  geom_point(aes(color = chain)) + 
  coord_equal() + 
  facet_wrap(~ chain)
  
ggplot(samps, aes(x, y)) + 
  geom_bin2d(binwidth = .03*c(1,1)) + 
  coord_equal()
  
# cut down on draws for time
subsamps <- samps \%>\% sample_n(500)
ggplot(subsamps, aes(x, y)) + geom_point() + coord_equal()

subsamps \%>\% 
  select(x, y) \%>\% 
  as.matrix() \%>\% 
  apply(1, function(x0) project_onto_variety(x0, p)) \%>\% t() \%>\% 
  as.data.frame() \%>\% as_tibble() \%>\% 
  purrr::set_names(c("x_proj", "y_proj")) \%>\% 
  bind_cols(subsamps, .) ->
  subsamps
  
ggvariety(p, n = 251) + coord_equal() +
  geom_segment(
    aes(x, y, xend = x_proj, yend = y_proj), 
    data = subsamps, inherit.aes = FALSE
  ) +
  geom_point(
    aes(x, y, color = factor(chain)), 
    data = subsamps, inherit.aes = FALSE
  )

}

}
\references{
Griffin, Z. and J. Hauenstein (2015). Real solutions to systems
of polynomial equations and parameter continuation. \emph{Advances in
Geometry} 15(2), pp.173--187.
}
\author{
David Kahle
}
